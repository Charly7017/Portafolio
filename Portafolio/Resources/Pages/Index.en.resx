<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Experience" xml:space="preserve">
    <value>Experience</value>
  </data>
  <data name="MeetDescription" xml:space="preserve">
    <value>My journey began during my studies in Computer Systems Engineering, where I had the opportunity to complete professional internships at two companies. My experience focused on the development of web and mobile projects, applying my knowledge to create efficient solutions tailored to users' needs. Although I am at the beginning of my career, my passion for programming has driven me to be self-taught, always seeking to improve my technical skills while acquiring new knowledge.</value>
  </data>
  <data name="MeetMeTitle" xml:space="preserve">
    <value>Meet me</value>
  </data>
  <data name="Phrase" xml:space="preserve">
    <value>Passion for technology and development of innovative solutions</value>
  </data>
  <data name="SoftwareDeveloper" xml:space="preserve">
    <value>Software Developer</value>
  </data>
  <data name="JrDeveloper" xml:space="preserve">
    <value>Jr Developer</value>
  </data>
  <data name="Intern" xml:space="preserve">
    <value>Trainee</value>
  </data>
  <data name="SharksiaExperience" xml:space="preserve">
    <value>I currently work as a junior developer, where I am responsible for developing and implementing new features in web applications, contributing to their continuous improvement and evolution. I am also in charge of receiving problem reports, analyzing application failures, identifying the root cause of errors, and implementing the necessary adjustments to fix them, ensuring the proper functioning of the system.</value>
  </data>
  <data name="TamsaExperience" xml:space="preserve">
    <value>
        I developed web and .NET applications using C#, covering projects in MAUI App, MVC App, and Web API.
    </value>
  </data>
  <data name="EhecatlExperience" xml:space="preserve">
    <value>
		I was trained in the fundamentals of web development, acquiring knowledge in
        frontend, backend, and databases.
    </value>
  </data>
  <data name="ProjectsTitle" xml:space="preserve">
    <value>Projects</value>
  </data>
  <data name="BookingSystem" xml:space="preserve">
    <value>Booking system</value>
  </data>
  <data name="TaskManager" xml:space="preserve">
    <value>Task manager</value>
  </data>
  <data name="PayTrack" xml:space="preserve">
    <value>Pay track</value>
  </data>
  <data name="SeeMoreProjects" xml:space="preserve">
    <value>See more projects</value>
  </data>
  <data name="SkillsTitle" xml:space="preserve">
    <value>Skills</value>
  </data>
  <data name="Tools" xml:space="preserve">
    <value>Tools</value>
  </data>
  <data name="OtherSkills" xml:space="preserve">
    <value>Other skills</value>
  </data>
  <data name="AugustMonth" xml:space="preserve">
    <value>August</value>
  </data>
  <data name="JulyMonth" xml:space="preserve">
    <value>July</value>
  </data>
  <data name="JuneMonth" xml:space="preserve">
    <value>June</value>
  </data>
  <data name="NowTime" xml:space="preserve">
    <value>Now</value>
  </data>
  <data name="SeptemberMonth" xml:space="preserve">
    <value>September</value>
  </data>
</root>